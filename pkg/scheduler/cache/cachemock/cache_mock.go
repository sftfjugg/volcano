// Code generated by MockGen. DO NOT EDIT.
// Source: volcano.sh/volcano/pkg/scheduler/cache (interfaces: Cache)

// Package mock_cache is a generated GoMock package.
package cachemock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	informers "k8s.io/client-go/informers"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
	record "k8s.io/client-go/tools/record"
	api "volcano.sh/volcano/pkg/scheduler/api"
	volumebinding "volcano.sh/volcano/pkg/scheduler/capabilities/volumebinding"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// AddBindTask mocks base method.
func (m *MockCache) AddBindTask(arg0 *api.TaskInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBindTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBindTask indicates an expected call of AddBindTask.
func (mr *MockCacheMockRecorder) AddBindTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBindTask", reflect.TypeOf((*MockCache)(nil).AddBindTask), arg0)
}

// AllocateVolumes mocks base method.
func (m *MockCache) AllocateVolumes(arg0 *api.TaskInfo, arg1 string, arg2 *volumebinding.PodVolumes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateVolumes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocateVolumes indicates an expected call of AllocateVolumes.
func (mr *MockCacheMockRecorder) AllocateVolumes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateVolumes", reflect.TypeOf((*MockCache)(nil).AllocateVolumes), arg0, arg1, arg2)
}

// BindPodGroup mocks base method.
func (m *MockCache) BindPodGroup(arg0 *api.JobInfo, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindPodGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindPodGroup indicates an expected call of BindPodGroup.
func (mr *MockCacheMockRecorder) BindPodGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindPodGroup", reflect.TypeOf((*MockCache)(nil).BindPodGroup), arg0, arg1)
}

// BindVolumes mocks base method.
func (m *MockCache) BindVolumes(arg0 *api.TaskInfo, arg1 *volumebinding.PodVolumes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindVolumes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindVolumes indicates an expected call of BindVolumes.
func (mr *MockCacheMockRecorder) BindVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindVolumes", reflect.TypeOf((*MockCache)(nil).BindVolumes), arg0, arg1)
}

// Client mocks base method.
func (m *MockCache) Client() kubernetes.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockCacheMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockCache)(nil).Client))
}

// ClientConfig mocks base method.
func (m *MockCache) ClientConfig() *rest.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientConfig")
	ret0, _ := ret[0].(*rest.Config)
	return ret0
}

// ClientConfig indicates an expected call of ClientConfig.
func (mr *MockCacheMockRecorder) ClientConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientConfig", reflect.TypeOf((*MockCache)(nil).ClientConfig))
}

// EventRecorder mocks base method.
func (m *MockCache) EventRecorder() record.EventRecorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventRecorder")
	ret0, _ := ret[0].(record.EventRecorder)
	return ret0
}

// EventRecorder indicates an expected call of EventRecorder.
func (mr *MockCacheMockRecorder) EventRecorder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventRecorder", reflect.TypeOf((*MockCache)(nil).EventRecorder))
}

// Evict mocks base method.
func (m *MockCache) Evict(arg0 *api.TaskInfo, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockCacheMockRecorder) Evict(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockCache)(nil).Evict), arg0, arg1)
}

// GetPodVolumes mocks base method.
func (m *MockCache) GetPodVolumes(arg0 *api.TaskInfo, arg1 *v1.Node) (*volumebinding.PodVolumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodVolumes", arg0, arg1)
	ret0, _ := ret[0].(*volumebinding.PodVolumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodVolumes indicates an expected call of GetPodVolumes.
func (mr *MockCacheMockRecorder) GetPodVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodVolumes", reflect.TypeOf((*MockCache)(nil).GetPodVolumes), arg0, arg1)
}

// RecordJobStatusEvent mocks base method.
func (m *MockCache) RecordJobStatusEvent(arg0 *api.JobInfo, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordJobStatusEvent", arg0, arg1)
}

// RecordJobStatusEvent indicates an expected call of RecordJobStatusEvent.
func (mr *MockCacheMockRecorder) RecordJobStatusEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordJobStatusEvent", reflect.TypeOf((*MockCache)(nil).RecordJobStatusEvent), arg0, arg1)
}

// RevertVolumes mocks base method.
func (m *MockCache) RevertVolumes(arg0 *api.TaskInfo, arg1 *volumebinding.PodVolumes) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertVolumes", arg0, arg1)
}

// RevertVolumes indicates an expected call of RevertVolumes.
func (mr *MockCacheMockRecorder) RevertVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertVolumes", reflect.TypeOf((*MockCache)(nil).RevertVolumes), arg0, arg1)
}

// Run mocks base method.
func (m *MockCache) Run(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockCacheMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCache)(nil).Run), arg0)
}

// SetMetricsConf mocks base method.
func (m *MockCache) SetMetricsConf(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetricsConf", arg0)
}

// SetMetricsConf indicates an expected call of SetMetricsConf.
func (mr *MockCacheMockRecorder) SetMetricsConf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetricsConf", reflect.TypeOf((*MockCache)(nil).SetMetricsConf), arg0)
}

// SharedInformerFactory mocks base method.
func (m *MockCache) SharedInformerFactory() informers.SharedInformerFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedInformerFactory")
	ret0, _ := ret[0].(informers.SharedInformerFactory)
	return ret0
}

// SharedInformerFactory indicates an expected call of SharedInformerFactory.
func (mr *MockCacheMockRecorder) SharedInformerFactory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedInformerFactory", reflect.TypeOf((*MockCache)(nil).SharedInformerFactory))
}

// Snapshot mocks base method.
func (m *MockCache) Snapshot() *api.ClusterInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(*api.ClusterInfo)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockCacheMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockCache)(nil).Snapshot))
}

// UpdateJobStatus mocks base method.
func (m *MockCache) UpdateJobStatus(arg0 *api.JobInfo, arg1 bool) (*api.JobInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", arg0, arg1)
	ret0, _ := ret[0].(*api.JobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockCacheMockRecorder) UpdateJobStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockCache)(nil).UpdateJobStatus), arg0, arg1)
}

// UpdateQueueStatus mocks base method.
func (m *MockCache) UpdateQueueStatus(arg0 *api.QueueInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQueueStatus indicates an expected call of UpdateQueueStatus.
func (mr *MockCacheMockRecorder) UpdateQueueStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueStatus", reflect.TypeOf((*MockCache)(nil).UpdateQueueStatus), arg0)
}

// UpdateSchedulerNumaInfo mocks base method.
func (m *MockCache) UpdateSchedulerNumaInfo(arg0 map[string]api.ResNumaSets) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedulerNumaInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedulerNumaInfo indicates an expected call of UpdateSchedulerNumaInfo.
func (mr *MockCacheMockRecorder) UpdateSchedulerNumaInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulerNumaInfo", reflect.TypeOf((*MockCache)(nil).UpdateSchedulerNumaInfo), arg0)
}

// WaitForCacheSync mocks base method.
func (m *MockCache) WaitForCacheSync(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForCacheSync", arg0)
}

// WaitForCacheSync indicates an expected call of WaitForCacheSync.
func (mr *MockCacheMockRecorder) WaitForCacheSync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCacheSync", reflect.TypeOf((*MockCache)(nil).WaitForCacheSync), arg0)
}
